Convert PSD to HTML5/CSS3

= Stack:

== Servers: type of processes
   === Web server:
        web dynos in heroku prod and passenger in local
   === Worker server
        resque worker dynos in heroku prod and resque thread started manually in local
   === Photoshop server
        windows photoshop in prod and MAC osX photoshop in local
    
== Store: Data storage type
    === store_local
        Web server run in local mode. All files are stored in localhost in ~/store_local. TODO: make this configurable
        use for all local development
        
    === store_production
        Web server run in heroku prod mode. All files are stored in S3 at store_production bucket
        pure production mode
        
    === store_staging
        Web server run in heroku staging mode. All files are stored in S3 at store_staging bucket
        
    === tmp
        Rails tmp directory for web servers and workers
        ~/tmp directory for photoshop servers
        could be deleted without any effect
        
== Tasks:
    === Uploading: Upload a file from client to store - handled by uploader dyno
        web servers handle this. Upload done via filepicker. 
        UploaderJob fetches file from filepicker and uploads it to our s3.
        Once upload complete, enqueues a ProcessorJob

    === Processing: Process a PSD file and generate json file - photoshop servers handle this. 
        has two parts - ruby master and extendscript slave
        master listens to resque Processor queue for a new file to be processed
            fetches files from store to tmp
            runs a slave applescript/vbscript which invokes extendscript
            extendscript processes the psd and puts all processed files same folder as psd
            uploads processed directory from tmp back to store
            enqueues a ParserJob to resque again
    
    === Parsing: generates grids from psd.json - handled by worker dyno
        Listens to parsing queue on resque
        the resque thread/worker dyno processes the job
            fetches the processed files from store to tmp
            parses the json and grids are created.
        enqueues GeneratorJob on resque
            
    
    === Generating: Generates markup from grids - handled by worker dyno
      Listens to generator queue on resque
        calls to_html on root_grid
        uploads back the generated folder to store
        also generates published folder
        sets design status to completed
    
    === Serving: Show generated markup
        handled by web server 
        on annotator call, shows the generated files in iframe
            fetches the required generated file from store to tmp
            send_file from tmp

== Queues: happens at interfaces
   All async queing happens via resque.
   === Web server queues files to be uploaded via UploaderJob
   === Uploader dyno queues files to be processed by photoshop
   === photoshop server queues design to be parsed by worker dyno
   === worker dyno queues html to be generated by worker dyno again
   
== Running in development:  store_local mode
    === transformer-web
      start redis-server and mongod server
      webserver: foreman start web
      resque: foreman start slogger (or) foreman start worker

    === transformer
      keep photoshop open
      rake deploy
      foreman start
                
    === Individual task like reparsing, regenerating etc
      Check out admin interface and click through actions from there

= Fetching font data

== Typekit:

 curl -s https://typekit.com/api/v1/json/libraries/trial?per_page=500 | jsonpp > typekit_trial.json
 curl -s https://typekit.com/api/v1/json/libraries/personal?per_page=500 | jsonpp > typekit_personal_1.json
 curl -s https://typekit.com/api/v1/json/libraries/personal?per_page=500&page_count=2 | jsonpp > typekit_personal_2.json
 curl -s https://typekit.com/api/v1/json/libraries/full?per_page=500 | jsonpp > typekit_full_1.json
 curl -s https://typekit.com/api/v1/json/libraries/full?per_page=500&page_count=2 | jsonpp > typekit_full_2.json
 
== Google Webfont:
 curl -s https://www.googleapis.com/webfonts/v1/webfonts  > google_webfont.json